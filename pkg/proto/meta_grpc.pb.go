// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: meta.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ThroughClient is the client API for Through service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThroughClient interface {
	Forward(ctx context.Context, opts ...grpc.CallOption) (Through_ForwardClient, error)
}

type throughClient struct {
	cc grpc.ClientConnInterface
}

func NewThroughClient(cc grpc.ClientConnInterface) ThroughClient {
	return &throughClient{cc}
}

func (c *throughClient) Forward(ctx context.Context, opts ...grpc.CallOption) (Through_ForwardClient, error) {
	stream, err := c.cc.NewStream(ctx, &Through_ServiceDesc.Streams[0], "/Through/Forward", opts...)
	if err != nil {
		return nil, err
	}
	x := &throughForwardClient{stream}
	return x, nil
}

type Through_ForwardClient interface {
	Send(*ForwardRequest) error
	Recv() (*ForwardResponse, error)
	grpc.ClientStream
}

type throughForwardClient struct {
	grpc.ClientStream
}

func (x *throughForwardClient) Send(m *ForwardRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *throughForwardClient) Recv() (*ForwardResponse, error) {
	m := new(ForwardResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ThroughServer is the server API for Through service.
// All implementations must embed UnimplementedThroughServer
// for forward compatibility
type ThroughServer interface {
	Forward(Through_ForwardServer) error
	mustEmbedUnimplementedThroughServer()
}

// UnimplementedThroughServer must be embedded to have forward compatible implementations.
type UnimplementedThroughServer struct {
}

func (UnimplementedThroughServer) Forward(Through_ForwardServer) error {
	return status.Errorf(codes.Unimplemented, "method Forward not implemented")
}
func (UnimplementedThroughServer) mustEmbedUnimplementedThroughServer() {}

// UnsafeThroughServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThroughServer will
// result in compilation errors.
type UnsafeThroughServer interface {
	mustEmbedUnimplementedThroughServer()
}

func RegisterThroughServer(s grpc.ServiceRegistrar, srv ThroughServer) {
	s.RegisterService(&Through_ServiceDesc, srv)
}

func _Through_Forward_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ThroughServer).Forward(&throughForwardServer{stream})
}

type Through_ForwardServer interface {
	Send(*ForwardResponse) error
	Recv() (*ForwardRequest, error)
	grpc.ServerStream
}

type throughForwardServer struct {
	grpc.ServerStream
}

func (x *throughForwardServer) Send(m *ForwardResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *throughForwardServer) Recv() (*ForwardRequest, error) {
	m := new(ForwardRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Through_ServiceDesc is the grpc.ServiceDesc for Through service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Through_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Through",
	HandlerType: (*ThroughServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Forward",
			Handler:       _Through_Forward_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "meta.proto",
}
